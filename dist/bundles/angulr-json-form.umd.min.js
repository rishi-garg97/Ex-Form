!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common/http"),require("@angular/material"),require("@angular/platform-browser/animations"),require("@angular/platform-browser"),require("@angular/common"),require("@angular/forms"),require("lodash"),require("ang-jsoneditor"),require("@angular/router"),require("firebase/app"),require("@angular/fire/auth"),require("@angular/fire/firestore"),require("@angular/fire/database"),require("@angular/material/snack-bar"),require("@angular/material/dialog"),require("@angular/material/expansion"),require("@angular/material/tabs"),require("angularx-social-login"),require("@angular/fire")):"function"==typeof define&&define.amd?define("angulr-json-form",["exports","@angular/core","@angular/common/http","@angular/material","@angular/platform-browser/animations","@angular/platform-browser","@angular/common","@angular/forms","lodash","ang-jsoneditor","@angular/router","firebase/app","@angular/fire/auth","@angular/fire/firestore","@angular/fire/database","@angular/material/snack-bar","@angular/material/dialog","@angular/material/expansion","@angular/material/tabs","angularx-social-login","@angular/fire"],t):t((e=e||self)["angulr-json-form"]={},e.ng.core,e.ng.common.http,e.ng.material,e.ng.platformBrowser.animations,e.ng.platformBrowser,e.ng.common,e.ng.forms,e._,e.angJsoneditor,e.ng.router,e.app,e.ng.fire.auth,e.ng.fire.firestore,e.ng.fire.database,e.ng.material["snack-bar"],e.ng.material.dialog,e.ng.material.expansion,e.ng.material.tabs,e.angularxSocialLogin,e.ng.fire)}(this,function(e,t,n,r,o,a,i,p,l,s,d,m,u,c,f,g,h,y,v,b,x){"use strict";l=l&&l.hasOwnProperty("default")?l.default:l;var S=function(){return(S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function w(e,t,n,r){var o,a=arguments.length,i=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var p=e.length-1;p>=0;p--)(o=e[p])&&(i=(a<3?o(i):a>3?o(t,n,i):o(t,n))||i);return a>3&&i&&Object.defineProperty(t,n,i),i}function I(e,t){return function(n,r){t(n,r,e)}}function C(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function M(e,t,n,r){return new(n||(n=Promise))(function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function p(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(i,p)}l((r=r.apply(e,t||[])).next())})}function k(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function p(a){return function(p){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,p])}}}function G(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function E(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(G(arguments[t]));return e}var j=function(){function e(e){var t=this;this.http=e,this.showHideSpinner=function(e){e?jQuery("#loaderModal").modal({backdrop:"static",keyboard:!1}).modal("show"):setTimeout(function(){jQuery("#loaderModal").modal("hide")},1e3)},this.loadSignUpJson=function(){return M(t,void 0,void 0,function(){var e;return k(this,function(t){switch(t.label){case 0:return e=this,[4,this.http.get("./assets/signup.json").toPromise()];case 1:return e.signUpJson=t.sent(),[2]}})})},this.getValidationErrorMesageJson=function(){return M(t,void 0,void 0,function(){var e;return k(this,function(t){switch(t.label){case 0:return e=this,[4,this.http.get("./assets/validation-message.json").toPromise()];case 1:return e.errorMessageJson=t.sent(),[2]}})})}}return e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(n.HttpClient))},token:e,providedIn:"root"}),e=w([t.Injectable({providedIn:"root"}),C("design:paramtypes",[n.HttpClient])],e)}(),F=function(){function e(e){this.commonService=e}return e.prototype.ngOnInit=function(){this.commonService.loadSignUpJson(),this.commonService.getValidationErrorMesageJson()},e=w([t.Component({selector:"app-root",template:'\x3c!--<nav class="navbar fixed-top navbar-dark bg-dark"--\x3e\n     \x3c!--style="color: white;">--\x3e\n\n  \x3c!--<a class="navbar-brand">Angular Form</a>--\x3e\n\n\x3c!--</nav>--\x3e\n<app-tool-bar></app-tool-bar>\n\n<div style="margin-top: 30px;">\n\n  <router-outlet></router-outlet>\n  <div id="loaderModal" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">\n    <div class="loader-dialog modal-dialog modal-dialog-centered" role="document">\n      <div class="modal-content" style="background-color: unset; border: unset;">\n        <div class="modal-body">\n          <app-loading-spinner></app-loading-spinner>\n        </div>\n      </div>\n    </div>\n  </div>\n  </div>\n\n\n\n\x3c!--<app-loading-spinner *ngIf="commonService.isSpinnerVisible"></app-loading-spinner>--\x3e\n\n',styles:[""]}),C("design:paramtypes",[j])],e)}(),O=function(){function e(){}return e=w([t.NgModule({declarations:[],imports:[a.BrowserModule,o.BrowserAnimationsModule,r.MatIconModule,r.MatButtonModule,r.MatNativeDateModule,r.MatDatepickerModule,r.MatCheckboxModule,r.MatInputModule,r.MatFormFieldModule,r.MatOptionModule,r.MatSelectModule,r.MatCardModule,r.MatToolbarModule,r.MatProgressSpinnerModule,r.MatGridListModule,r.MatStepperModule],exports:[a.BrowserModule,o.BrowserAnimationsModule,r.MatIconModule,r.MatButtonModule,r.MatNativeDateModule,r.MatDatepickerModule,r.MatCheckboxModule,r.MatInputModule,r.MatFormFieldModule,r.MatOptionModule,r.MatSelectModule,r.MatCardModule,r.MatToolbarModule,r.MatGridListModule,r.MatProgressSpinnerModule,r.MatStepperModule]})],e)}(),V=function(){function e(e,t){var n=this;this.formBuilder=e,this.http=t,this.schema=this.http.get('url: "get ../../../assets/schema.json"'),this.buildForm=function(){var e={},t=[];return n.schema.forEach(function(r){if(t=[],r.required&&t.push(p.Validators.required),"String"===r.dataType&&(t.push(p.Validators.minLength(r.minLength)),t.push(p.Validators.maxLength(r.maxLength)),t.push(p.Validators.pattern(r.pattern))),"Number"!==r.dataType&&"Measure"!==r.dataType||(t.push(p.Validators.max(r.max)),t.push(p.Validators.min(r.min))),"Measure"===r.dataType){t=[];var o="";1===r.units.length&&(o=r.units[0]),r.required&&(t=[p.Validators.required,p.Validators.min(r.min),p.Validators.max(r.max)]),e[r.name]=n.formBuilder.group({in:["",t],unit:[{value:o,disabled:!0},p.Validators.required]})}else e[r.name]=["",t]}),n.formBuilder.group(e)}}return e.prototype.getErrorMessage=function(e){var t="";return e.hasError("required")?t="This Field is required":e.hasError("pattern")?t="This field contain only character value.":e.hasError("minlength")?t="This field require minimum "+e.errors.minlength.requiredLength+" characters":e.hasError("maxlength")?t="This field has maximum "+e.errors.maxlength.requiredLength+" characters":e.hasError("min")?t="This field required minimum value "+e.errors.min.min:e.hasError("max")&&(t="This field has maximum value "+e.errors.max.max),t},e.prototype.enableUnit=function(e,t){t.get(e.name).value.in&&e.units.length>1?t.get(e.name).controls.unit.enable():(e.units.length>1&&t.get(e.name).controls.unit.reset(),t.get(e.name).controls.unit.disable())},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(p.FormBuilder),t.ɵɵinject(n.HttpClient))},token:e,providedIn:"root"}),e=w([t.Injectable({providedIn:"root"}),C("design:paramtypes",[p.FormBuilder,n.HttpClient])],e)}(),L=function(){function e(e,t){var n=this;this.validationService=e,this.http=t,this.title="JsonForm",this.schema=this.http.get('url:"../../../assets/schema.json"'),this.login=function(){console.log(n.formGroup.value)},this.reset=function(){return n.formGroup.reset()},this.enable=function(e){n.validationService.enableUnit(e,n.formGroup)}}return e.prototype.ngOnInit=function(){this.formGroup=this.validationService.buildForm()},e.prototype.getEror=function(e){if(!this.formGroup.get(e.name).controls.unit.disabled)return this.validationService.getErrorMessage(this.formGroup.get(e.name).controls.unit)},e.prototype.getError=function(e){if(this.formGroup.get(e.name)instanceof p.FormGroup){return this.validationService.getErrorMessage(this.formGroup.get(e.name).controls.in)}return this.validationService.getErrorMessage(this.formGroup.get(e.name))},e=w([t.Component({selector:"app-json-form",template:'<div class="jumbotron">\n\n      <form [formGroup]="formGroup" (ngSubmit)="login()" class="form">\n\n\n              <h5>Create Protocol</h5>\n\n              <ng-container *ngFor="let property of schema;let i=index;">\n\n                    \x3c!--Form field for text input  --\x3e\n                     <div class="form-group" *ngIf="property.dataType==\'String\'">\n\n                         <mat-form-field hintLabel="Max {{property.maxLength}} character"\n                                         appearance="outline">\n\n                                <mat-label>{{property.alias}}\n                                  <span *ngIf = "property.required" class="asterik">*</span>\n                                </mat-label>\n\n                                <input matInput #input\n                                       formControlName={{property.name}}\n                                       maxLength={{property.maxLength}}\n                                       minLength="{{property.minLength}}"\n                                       placeholder={{property.alias}} type="text">\n\n                                <mat-hint align="end">{{input.value.length}}/{{property.maxLength}}</mat-hint>\n\n                                \x3c!-- <mat-error *ngIf="property.name + \'.invalid\'">{{getError(property)}}</mat-error> --\x3e\n                                <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError(property)}}</mat-error>\n\n                         </mat-form-field>\n\n                     </div>\n\n                    \x3c!--Form field for number input  --\x3e\n\n                    <div class="form-group" *ngIf="property.dataType==\'Number\'" style="margin-bottom:0px;">\n\n                          <mat-form-field appearance="outline">\n\n                                <mat-label>{{property.alias}}\n                                    <span *ngIf = "property.required" class="asterik">*</span>\n                                </mat-label>\n\n                                <input matInput min={{property.min}}\n                                       max={{property.max}}\n                                       formControlName={{property.name}}\n                                       type={{property.dataType|lowercase}}\n                                       placeholder={{property.alias}}>\n\n                                <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError(property)}}</mat-error>\n\n                          </mat-form-field>\n\n                    </div>\n\n                    \x3c!--Form field for enumeration with multiselect --\x3e\n\n                    <div class="form-group" *ngIf="property.dataType==\'Enumeration\'&& property.array==true" style="margin-bottom:0px;">\n\n                          <mat-form-field appearance="outline">\n\n                                 <mat-label>{{property.alias}}\n                                        <span *ngIf = "property.required" class="asterik">*</span>\n                                 </mat-label>\n\n                                 <mat-select formControlName={{property.name}} multiple>\n                                        <mat-option *ngFor="let opt of property.values"\n                                                    [value]="opt">{{opt}}\n                                        </mat-option>\n                                 </mat-select>\n\n                                 <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError(property)}}</mat-error>\n\n                          </mat-form-field>\n\n                    </div>\n\n                    \x3c!--Form field for text enumeration with single selection  --\x3e\n\n                    <div class="form-group" *ngIf="property.dataType==\'Enumeration\'&& property.array==false" style="margin-bottom:0px;">\n\n                                 <mat-form-field appearance="outline">\n\n                                        <mat-label>{{property.alias}}\n                                                  <span *ngIf = "property.required" class="asterik">*</span>\n                                        </mat-label>\n\n                                        <mat-select formControlName={{property.name}}>\n                                                  <mat-option>Select</mat-option>\n                                                  <mat-option *ngFor="let opt of property.values"\n                                                              [value]="opt">{{opt}}\n                                                  </mat-option>\n                                        </mat-select>\n\n                                        <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError(property)}}</mat-error>\n\n                                 </mat-form-field>\n\n                    </div>\n\n                    \x3c!--Form field for Measure Datatype  --\x3e\n\n                    <div class="row form-group" *ngIf="property.dataType==\'Measure\'" [formGroupName]="property.name" style="margin-bottom:0px;">\n\n                          <div class="col-md-6">\n\n                                   <mat-form-field appearance="outline">\n\n                                           <mat-label>{{property.alias}}\n                                                      <span *ngIf = "property.required" class="asterik">*</span>\n                                           </mat-label>\n\n                                           <input matInput formControlName="in"\n                                                  placeholder={{property.alias}}\n                                                  type="number"\n                                                  (keyup)="enable(property)"\n                                                  (focus)="enable(property)" >\n\n                                   <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError(property)}}</mat-error>\n\n                                   </mat-form-field>\n                          </div>\n\n                           <div class="col-md-6">\n\n                                    <mat-form-field appearance="outline">\n\n                                            <mat-label>Unit\n                                                   <span *ngIf = "property.required" class="asterik">*</span>\n                                            </mat-label>\n\n                                            <mat-select formControlName="unit">\n                                                   <mat-option>Select</mat-option>\n                                                   <mat-option *ngFor="let opt of property.units" [value]="opt">\n                                                   {{opt}}\n                                                   </mat-option>\n                                            </mat-select>\n\n                                            <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getEror(property)}}</mat-error>\n\n                                    </mat-form-field>\n                           </div>\n                      </div>\n\n\n              </ng-container>\n\n\n              <div>\n\n                     <p style="font-size:13px;"><span class="asterik" style="font-size:16px;">* </span>field are mandatory</p>\n\n              </div>\n\n              <div class="btn btn-toolbar">\n\n                     <button type="submit" class="btn btn-primary" [disabled]="!this.formGroup.valid">Submit</button>\n                &nbsp; &nbsp;\n                     <button type="reset" class="btn btn-primary">Reset</button>\n\n              </div>\n\n       </form>\n\n</div>\n\n\x3c!--\n    <pre>\n    formGroupForm?.value|json}}\n    </pre> --\x3e\n\n\n\n\n\x3c!--.mat-form-field-flex > .mat-form-field-infix {--\x3e\n\x3c!--padding: 0.35em 0px !important;--\x3e\n\x3c!--}--\x3e\n',styles:[".jumbotron{background-color:#f8f9fa;padding:15px;margin-top:56px}.mat-form-field{width:100%}::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}.row{margin-bottom:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=number]{-moz-appearance:textfield}.asterik{color:red}.form{background:#fff;box-shadow:0 2px 6px 4px rgba(0,0,0,.14);border-radius:15px;margin:0 30%;padding:20px}"]}),C("design:paramtypes",[V,n.HttpClient])],e)}(),B=function(){function e(){var e=this;this.initialize=function(){var t=Object.assign({},e.uiSchema);"Normal"===t.type?t.fields=e.formatFields(t):l.each(t.steps,function(t){t.fields=e.formatFields(t)}),e.modifiedUiSchema=t,e.modifiedUiSchema.name=e.modelSchema.name},this.formatFields=function(t){return l.map(t.fields,function(t){var n=l.find(e.modelSchema.properties,{name:t.name});if(n)return S({},t,n)})}}return e.prototype.ngOnInit=function(){this.initialize()},e.prototype.ngOnChanges=function(e){for(var t in e){var n=e[t];JSON.stringify(n.currentValue)!==JSON.stringify(n.previousValue)&&this.initialize()}},w([t.Input(),C("design:type",Object)],e.prototype,"modelSchema",void 0),w([t.Input(),C("design:type",Object)],e.prototype,"uiSchema",void 0),e=w([t.Component({selector:"app-form",template:'<app-simple *ngIf="modifiedUiSchema.type == \'Normal\' "\n            [uiSchema]="modifiedUiSchema">\n</app-simple>\n\n\n\n\x3c!--<app-accordian *ngIf="modifiedUiSchema.type ==\'Group\'"--\x3e\n               \x3c!--[uiSchema]="modifiedUiSchema">--\x3e\n\x3c!--</app-accordian>--\x3e\n\n\n\n\x3c!--<app-step-form *ngIf="modifiedUiSchema.type ==\'Group\'"--\x3e\n               \x3c!--[uiSchema]="modifiedUiSchema">--\x3e\n\x3c!--</app-step-form>--\x3e\n\n<app-tab *ngIf="modifiedUiSchema.type ==\'Group\'"\n         [uiSchema]="modifiedUiSchema">\n</app-tab>\n',styles:[".jumbotron{background-color:#f8f9fa;padding:15px;margin-top:56px}::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}.row{margin-bottom:0}.asterik{color:red}.ex-form{background:#fff;box-shadow:0 2px 6px 4px rgba(0,0,0,.14);border-radius:15px;padding:20px}.padding-right-zero{padding-right:0}.padding-zero{padding:0}"]}),C("design:paramtypes",[])],e)}(),q=function(){this.get=function(){return p.Validators.required}},T=function(){this.get=function(e){return p.Validators.minLength(e)}},D=function(){this.get=function(e){return p.Validators.maxLength(e)}},A=function(){this.get=function(e){return p.Validators.pattern(e)}},U=function(){function e(e,t){var n=this;this.http=e,this.commonService=t,this.validationMessage=this.commonService.errorMessageJson,this.errorMessage=function(e,t){var r="Field is Invalid",o=e.get(t.name),a=n.validationMessage.fields[t.name]?n.validationMessage.fields[t.name]:"";o.hasError("required")?r=a.required?a.required:n.validationMessage.common.required:o.hasError("pattern")&&"mobileNo"===t.name?r=a.mobile?a.mobile:n.validationMessage.common.mobile:o.hasError("pattern")?r=a.pattern?a.pattern:n.validationMessage.common.pattern:o.hasError("minlength")?r=a.minLength?a.minLength:n.validationMessage.common.minLength:o.hasError("maxlength")?r=a.maxLength?a.maxLength:n.validationMessage.common.maxLength:o.hasError("min")?r=a.min?a.min:n.validationMessage.common.min:o.hasError("max")?r=a.max?a.max:n.validationMessage.common.max:o.hasError("email")&&(r=a.email?a.email:n.validationMessage.common.email);var i=t.alias,p=t.min,l=t.max,s=t.minLength,d=t.maxLength,m=t.pattern;return Mustache.render(r,{fieldName:i,min:p,max:l,minLength:s,maxLength:d,pattern:m})}}return e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(n.HttpClient),t.ɵɵinject(j))},token:e,providedIn:"root"}),e=w([t.Injectable({providedIn:"root"}),C("design:paramtypes",[n.HttpClient,j])],e)}(),N=function(){function e(e,n){var r=this;this.formBuilder=e,this.validationMessageGenerator=n,this.addControl=new t.EventEmitter,this.addValidator=function(){var e,t=[];r.property.required&&t.push((new q).get()),r.property.minLength&&null!=r.property.minLength&&t.push((new T).get(r.property.minLength)),r.property.maxLength&&null!=r.property.maxLength&&t.push((new D).get(r.property.maxLength)),r.property.pattern&&null!=r.property.pattern&&t.push((new A).get(r.property.pattern)),r.formGroup=r.formBuilder.group(((e={})[r.property.name]=[{value:"",disabled:!r.property.enable},t],e)),r.formGroup.updateValueAndValidity(),r.addControl.emit({key:r.property.name,value:r.formGroup})},this.getError=function(){return r.validationMessageGenerator.errorMessage(r.formGroup,r.property)}}return e.prototype.ngOnInit=function(){this.addValidator()},e.prototype.ngOnChanges=function(){},w([t.Input(),C("design:type",Object)],e.prototype,"property",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"addControl",void 0),e=w([t.Component({selector:"app-text-field",template:'<div [formGroup]="formGroup">\n   <mat-form-field appearance="outline">\n    <mat-label>{{property.alias}}\n      <span *ngIf = "property.required" class="asterik">*</span>\n    </mat-label>\n\n  <input matInput #input\n         formControlName={{property.name}}\n         placeholder={{property.alias}}\n         type="text"\n         [attr.maxlength] = "property.maxLength ? null : property.maxLength"\n         [attr.minlength] = "property.minLength ? null : property.minLength">\n\n    <mat-hint align="end" *ngIf = "property.maxLength != null">{{input.value.length}}/{{property.maxLength}}</mat-hint>\n    <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError()}}</mat-error>\n\n  </mat-form-field>\n</div>\n',styles:[".mat-form-field{width:100%}.asterik{color:red}"]}),C("design:paramtypes",[p.FormBuilder,U])],e)}(),z=function(){this.get=function(e){return p.Validators.max(e)}},P=function(){this.get=function(e){return p.Validators.min(e)}},R=function(){function e(e,n){var r=this;this.formBuilder=e,this.validationMessageGenerator=n,this.addControl=new t.EventEmitter,this.addValidator=function(){var e,t=[];r.property.required&&t.push((new q).get()),r.property.max&&null!=r.property.max&&t.push((new z).get(r.property.max)),r.property.max&&null!=r.property.min&&t.push((new P).get(r.property.min)),r.property.pattern&&null!=r.property.pattern&&t.push((new A).get(r.property.pattern)),r.formGroup=r.formBuilder.group(((e={})[r.property.name]=[{value:"",disabled:!r.property.enable},t],e)),r.formGroup.updateValueAndValidity(),r.addControl.emit({key:r.property.name,value:r.formGroup})},this.getError=function(){return r.validationMessageGenerator.errorMessage(r.formGroup,r.property)}}return e.prototype.ngOnInit=function(){this.addValidator()},w([t.Input(),C("design:type",Object)],e.prototype,"property",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"addControl",void 0),e=w([t.Component({selector:"app-number-field",template:'<div [formGroup]="formGroup">\n\n  <mat-form-field appearance="outline">\n    <mat-label>\n      {{property.alias}}\n      <span *ngIf="property.required" class="asterik">*</span>\n    </mat-label>\n\n      <input  matInput\n              formControlName={{property.name}}\n              type="number"\n              [attr.min] = "property.min ? null : property.min"\n              [attr.max] = "property.max ? null : property.max"\n              placeholder={{property.alias}}>\n    \x3c!--(change)="fieldValueChanged()">--\x3e\n\n    <mat-error *ngIf="formGroup.controls[property.name].invalid">\n      {{getError()}}\n    </mat-error>\n\n  </mat-form-field>\n</div>\n\n\x3c!--formControlName={{property.name}}--\x3e\n',styles:[".mat-form-field{width:100%}.asterik{color:red}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=number]{-moz-appearance:textfield}"]}),C("design:paramtypes",[p.FormBuilder,U])],e)}(),$=function(){function e(e,n){var r=this;this.formBuilder=e,this.validationMessageGenerator=n,this.addControl=new t.EventEmitter,this.getError=function(){return r.validationMessageGenerator.errorMessage(r.formGroup,r.property)}}return e.prototype.ngOnInit=function(){this.addValidator()},e.prototype.addValidator=function(){var e,t=[],n="",r=!1;this.property.required&&t.push((new q).get()),this.property.values&&1===this.property.values.length?(n=this.property.values[0],r=!0):r=!this.property.enable,this.formGroup=this.formBuilder.group(((e={})[this.property.name]=[{value:n,disabled:r},t],e)),this.formGroup.updateValueAndValidity(),this.addControl.emit({key:this.property.name,value:this.formGroup})},w([t.Input(),C("design:type",Object)],e.prototype,"property",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"addControl",void 0),e=w([t.Component({selector:"app-dropdown",template:'<div [formGroup]="formGroup">\n  <mat-form-field appearance="outline">\n    <mat-label>{{property.alias}}\n      <span *ngIf = "property.required" class="asterik">*</span>\n    </mat-label>\n\n    <mat-select formControlName={{property.name}} multiple={{property.array}}>\n      <mat-option *ngIf="!property.array">Select</mat-option>\n      <mat-option *ngFor="let opt of property.values" [value]="opt">\n        {{opt}}\n      </mat-option>\n    </mat-select>\n\n    <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError()}}</mat-error>\n\n  </mat-form-field>\n\n</div>\n',styles:[".mat-form-field{width:100%}.asterik{color:red}"]}),C("design:paramtypes",[p.FormBuilder,U])],e)}(),J=function(){function e(e){var n=this;this.formBuilder=e,this.formGroup=this.formBuilder.group({}),this.addControl=new t.EventEmitter,this.newProperty={measure:{},unit:{}},this.onMeasureChange=function(e){var t=n.formGroup.controls[n.newProperty.unit.name];e&&n.property.values.length>1?t.enable():(n.property.values.length>1&&t.reset(),t.disable())},this.addMeasureControl=function(e){n.formGroup.addControl(e.key,e.value),n.formGroup.updateValueAndValidity(),n.addControl.emit({key:n.property.name,value:n.formGroup})}}return e.prototype.ngOnInit=function(){this.newProperty.measure=S({},this.property),this.newProperty.measure.name+="Measure",this.newProperty.unit=S({},this.property),this.newProperty.unit.name+="Unit"},w([t.Input(),C("design:type",Object)],e.prototype,"property",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"addControl",void 0),e=w([t.Component({selector:"app-measure",template:'<div class="row col-sm-12" style="padding: 0;">\n  <div class="col-sm-6" [formGroup]="formGroup" style="padding-right: 0;">\n    <app-number-field\n      [property]="newProperty.measure"\n      (addControl)= "addMeasureControl($event)" >\n    </app-number-field>\n  </div>\n\n  <div class="col-sm-6" [formGroup]="formGroup" style="padding-right: 0;">\n\n    <app-dropdown\n      [property]="newProperty.unit"\n      (addControl)="addMeasureControl($event)" >\n    </app-dropdown>\n  </div>\n\n</div>\n',styles:[""]}),C("design:paramtypes",[p.FormBuilder])],e)}(),Y=function(){function e(e){var t=this;this.http=e,this.UISchema=this.http.get('url: "../../assets/ui-schema.json"'),this.schemaUrl="assets/schema.json",this.schema={model:{form:{},editor:{}},ui:{form:{},editor:{}}},this.enitityModelSchema=function(e){var n=S({},t.modelSchema),r=l.find(n,function(t){if(t.name===e)return t});r.steps&&null!==r.steps?r.steps.forEach(function(e){e.refs=E(r.refs),e=t.mapsUnitToValue(e)}):r.properties=t.mapsUnitToValue(r);var o=S({},r);return t.schema.model.form=o,t.schema.model.editor=l.clone(o),t.schema.model.editor},this.mapsUnitToValue=function(e){return e.properties=e.properties.map(function(t){return"Ref"===t.dataType&&e.refs.forEach(function(e){t.ref===e.name&&(Object.keys(e).forEach(function(t){return null==e[t]&&delete e[t]}),delete e.name,Object.assign(t,e))}),"Measure"===t.dataType&&t.units&&(t.values=E(t.units),delete t.units),t}),e.properties},this.uiSchema=function(e){var n=l.find(t.UISchema,{type:e});return t.schema.ui.form=l.cloneDeep(n),t.schema.ui.editor=l.cloneDeep(n),t.schema.ui.editor},this.init=function(){return M(t,void 0,void 0,function(){return k(this,function(e){return[2,this.http.get(this.schemaUrl).toPromise()]})})}}return e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(n.HttpClient))},token:e,providedIn:"root"}),e=w([t.Injectable({providedIn:"root"}),C("design:paramtypes",[n.HttpClient])],e)}(),H=function(){function e(e){var t=this;this.dashboardService=e,this.entity=[{name:"Aliquot"},{name:"Case"},{name:"Demographic"},{name:"Diagnosis"},{name:"Experiment"},{name:"Instrument"},{name:"InstrumentModel"},{name:"Lab"},{name:"Project"},{name:"Protocol"},{name:"Sample"}],this.formType=["Normal","Group"],this.selected="Protocol",this.selectedType="Normal",this.initialize=function(){t.editorModelSchema=t.dashboardService.enitityModelSchema(t.selected),t.formModelSchema=t.dashboardService.schema.model.form,t.editorUISchema=t.dashboardService.uiSchema(t.selectedType),t.formUISchema=t.dashboardService.schema.ui.form},this.reinitialize=function(){t.initialize()},this.uiSchemaChange=function(e){t.formUISchema=e},this.modelSchemaChange=function(e){t.formModelSchema=e},this.setUiSchema=function(e){t.editorUISchema=t.dashboardService.uiSchema(e),t.formUISchema=t.dashboardService.schema.ui.form}}return e.prototype.ngOnInit=function(){this.initialize()},w([t.ViewChild(s.JsonEditorComponent,{static:!1}),C("design:type",s.JsonEditorComponent)],e.prototype,"editor",void 0),e=w([t.Component({selector:"app-dashboard",template:'<div class="row" style="margin:0;">\n  &nbsp;&nbsp;&nbsp;&nbsp;<h4>angular-jsonschema-form</h4> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n  <ul class="nav nav-pills mb-3" role="tablist">\n    <li class="nav-item"\n        *ngFor="let type of formType"\n        (click)="setUiSchema(type)">\n      <a class="nav-link active"\n         data-toggle="pill"\n         [class.active]="type === selectedType"\n         href="">{{type}}</a>\n    </li>\n  </ul>\n\n</div>\n\n<div class="row" style="margin:0;">\n  <div class="col-sm-6">\n    <app-ui-schema\n      [uiSchemaData]="editorUISchema"\n      (uiSchemaChange)="uiSchemaChange($event)">\n    </app-ui-schema>\n\n    <app-model-schema\n      [modelSchemaData]="editorModelSchema"\n      (modelSchemaChange)="modelSchemaChange($event)">\n    </app-model-schema>\n\n\n  </div>\n  <div class="col-sm-6">\n\n\n\n      \x3c!--<mat-form-field appearance="outline">--\x3e\n        \x3c!--<mat-label>Entity</mat-label>--\x3e\n        \x3c!--<mat-select [(value)]="selected" (selectionChange)="reinitialize()">--\x3e\n          \x3c!--<mat-option *ngFor="let opt of entity" [value]="opt.name">--\x3e\n            \x3c!--{{opt.name}}--\x3e\n          \x3c!--</mat-option>--\x3e\n        \x3c!--</mat-select>--\x3e\n      \x3c!--</mat-form-field>--\x3e\n\n      <app-form\n        [modelSchema]="formModelSchema"\n        [uiSchema]="formUISchema">\n      </app-form>\n\n\n  </div>\n</div>\n',styles:["::ng-deep div.jsoneditor-menu{width:100%;height:35px;padding:2px;margin:0;box-sizing:border-box;color:#fff;background-color:#3883fa;border-bottom:1px solid #3883fa;display:none}mat-card{background:#f5f5f5;padding:0;border:1px solid #000}::ng-deep div.jsoneditor{border:none}"]}),C("design:paramtypes",[Y])],e)}(),_=function(){function e(e,t,n,r){var o=this;this.afd=e,this.afs=t,this.afAuth=n,this.router=r,this.SignUp=function(e,t){return M(o,void 0,void 0,function(){var n;return k(this,function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this.afAuth.auth.createUserWithEmailAndPassword(e,t)];case 1:return n=r.sent(),this.SetUserData(n.user),[2,n];case 2:return[2,r.sent()];case 3:return[2]}})})},this.GoogleAuth=function(){return M(o,void 0,void 0,function(){var e,t;return k(this,function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,this.afAuth.auth.signInWithPopup(new m.auth.GoogleAuthProvider)];case 1:return e=n.sent(),this.SetUserData(e.user),[3,3];case 2:return t=n.sent(),window.alert(t),[3,3];case 3:return[2]}})})},this.getUsers=function(){o.afd.database.ref("users/NoWPNhcWEXX5npSgSk3GdGxIdVw2").once("value").then(function(e){e.val()})},this.afAuth.authState.subscribe(function(e){e?(o.userData=e,localStorage.setItem("user",JSON.stringify(o.userData))):(localStorage.setItem("user",null),JSON.parse(localStorage.getItem("user")))})}return e.prototype.SignIn=function(e,t){return this.afAuth.auth.signInWithEmailAndPassword(e,t)},e.prototype.sendVerificationMail=function(){return this.afAuth.auth.currentUser.sendEmailVerification().then(function(){})},Object.defineProperty(e.prototype,"isLoggedIn",{get:function(){return null!==JSON.parse(localStorage.getItem("user"))},enumerable:!0,configurable:!0}),e.prototype.AuthLogin=function(e){return this.afAuth.auth.signInWithPopup(e)},e.prototype.SetUserData=function(e){var t=this.afd.database.ref("users/"+e.uid),n={uid:e.uid,email:e.email,displayName:null===e.displayName?"":e.displayName,photoURL:null===e.photoURL?"":e.photoURL,emailVerified:e.emailVerified};return t.set(n)},e.prototype.SignOut=function(){var e=this;return this.afAuth.auth.signOut().then(function(){localStorage.removeItem("user"),e.router.navigate([""])})},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(f.AngularFireDatabase),t.ɵɵinject(c.AngularFirestore),t.ɵɵinject(u.AngularFireAuth),t.ɵɵinject(d.Router))},token:e,providedIn:"root"}),e=w([t.Injectable({providedIn:"root"}),C("design:paramtypes",[f.AngularFireDatabase,c.AngularFirestore,u.AngularFireAuth,d.Router])],e)}(),W=function(){function e(e){var t=this;this.snackBar=e,this.config={duration:2e3},this.show=function(e,n){t.snackBar.open(e,n,t.config)}}return e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(g.MatSnackBar))},token:e,providedIn:"root"}),e=w([t.Injectable({providedIn:"root"}),C("design:paramtypes",[r.MatSnackBar])],e)}(),K=function(){function e(e,t,n,r,o,a,i,p){var l=this;this.router=e,this.dialogRef=t,this.data=n,this.formBuilder=r,this.http=o,this.authService=a,this.commonService=i,this.snackBarMessageService=p,this.formGroup=this.formBuilder.group({}),this.schema=this.commonService.signUpJson,this.signup=function(){return M(l,void 0,void 0,function(){var e;return k(this,function(t){switch(t.label){case 0:this.commonService.showHideSpinner(!0),t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.authService.SignUp(this.formGroup.controls.email.value.email,this.formGroup.controls.password.value.password)];case 2:return t.sent(),this.commonService.showHideSpinner(!1),this.router.navigate(["dashboard"]),this.snackBarMessageService.show("User Registered Successfully"),this.dialogRef.close(),[3,4];case 3:return(e=t.sent())&&(console.log(e),this.snackBarMessageService.show(e.message)),this.commonService.showHideSpinner(!1),[3,4];case 4:return[2]}})})},this.getError=function(e){return l.formGroup.controls[e].hasError("required")?"You must enter a value":l.formGroup.controls[e].hasError("pattern")&&"password"===e?"This field contain only character value.":l.formGroup.controls[e].hasError("pattern")?"This field contain only character value.":l.formGroup.controls[e].hasError("email")?"Invalid Email !":"error"},this.addControl=function(e){l.formGroup.addControl(e.key,e.value),l.formGroup.updateValueAndValidity()}}return e.prototype.ngOnInit=function(){},e.prototype.cancel=function(){this.dialogRef.close()},e=w([t.Component({selector:"app-signup",template:'<div class="main">\n  <h2 mat-dialog-title>Sign Up</h2>\n  <mat-dialog-content>\n    <form [formGroup]="formGroup" class="ex-form">\n      <div>\n        <ng-container *ngFor="let property of schema.properties;let i=index;">\n          \x3c!--Form field for text input  --\x3e\n          <div class="form-group" *ngIf="property.dataType==\'String\'">\n            <app-text-field [property]="property"\n                            (addControl)= "addControl($event)" >\n            </app-text-field>\n          </div>\n\n          \x3c!--Form field for number input  --\x3e\n          <div class="form-group" *ngIf="property.dataType==\'Number\'" style="margin-bottom:0;">\n\n            <app-number-field [property]="property"\n                              (addControl)= "addControl($event)" >\n            </app-number-field>\n          </div>\n\n          <div class="form-group" *ngIf="property.dataType==\'Email\'" style="margin-bottom:0;">\n\n            <app-email-field  [property]="property"\n                              (addControl)= "addControl($event)" >\n            </app-email-field>\n          </div>\n\n          <div class="form-group" *ngIf="property.dataType==\'Password\'" style="margin-bottom:0;">\n\n            <app-password-field  [property]="property"\n                                 (addControl)= "addControl($event)" >\n            </app-password-field>\n          </div>\n\n        </ng-container>\n      </div>\n\n    </form>\n  </mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button (click)="signup()" [disabled]="!formGroup.valid" color="primary">Sign Up</button>\n    <button mat-button (click)="cancel()" color="primary">Cancel</button>\n\n  </mat-dialog-actions>\n\n</div>\n',styles:[".asterik{color:red}.main{width:450px}.form-group{padding:0;margin-bottom:3px}.mat-form-field{-webkit-appearance:none;-moz-appearance:none;appearance:none}::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}"]}),I(2,t.Inject(r.MAT_DIALOG_DATA)),C("design:paramtypes",[d.Router,r.MatDialogRef,Object,p.FormBuilder,n.HttpClient,_,j,W])],e)}(),Q=function(){function e(e,t,n,r,o,a,i,p){var l=this;this.router=e,this.dialogRef=t,this.data=n,this.formBuilder=r,this.authService=o,this.commonService=a,this.snackBarMessageService=i,this.dialog=p,this.login=function(e){return M(l,void 0,void 0,function(){var t;return k(this,function(n){switch(n.label){case 0:this.commonService.showHideSpinner(!0),n.label=1;case 1:return n.trys.push([1,6,,7]),"google"!==e?[3,3]:(this.commonService.showHideSpinner(!1),[4,this.authService.GoogleAuth()]);case 2:return n.sent(),[3,5];case 3:return[4,this.authService.SignIn(this.formGroup.controls.email.value,this.formGroup.controls.password.value)];case 4:n.sent(),this.commonService.showHideSpinner(!1),n.label=5;case 5:return this.snackBarMessageService.show("LogIn Successfull"),this.router.navigate(["dashboard"]),this.dialogRef.close(),[3,7];case 6:return(t=n.sent())&&("auth/user-not-found"===t.code?this.openSignupDialog():this.snackBarMessageService.show(t.message)),this.commonService.showHideSpinner(!1),[3,7];case 7:return[2]}})})},this.getError=function(e){return l.formGroup.controls[e].hasError("required")?e+" is required. ":l.formGroup.controls[e].hasError("email")?"Invalid Email !":"error"},this.openSignupDialog=function(){l.dialog.closeAll(),l.dialog.open(K).afterClosed().subscribe(function(e){})}}return e.prototype.ngOnInit=function(){this.formGroup=this.formBuilder.group({email:["r@gmail.com",[p.Validators.required,p.Validators.email]],password:["rishi1997",[p.Validators.required]]}),this.authService.getUsers()},e.prototype.cancel=function(){this.dialogRef.close()},e=w([t.Component({selector:"app-login",template:'<div class="main">\n  <h2 mat-dialog-title>Login</h2>\n\n  <mat-dialog-content>\n    <form class="example-form" [formGroup]="formGroup">\n\n      <div class="col-sm-12" style="padding: 0;margin-top:7px">\n\n        <mat-form-field appearance="outline">\n          <mat-label>Email</mat-label>\n          <input matInput placeholder="Email" formControlName="email" required>\n          <mat-error *ngIf="formGroup.controls[\'email\'].invalid">{{getError("email")}}</mat-error>\n\n        </mat-form-field>\n\n      </div>\n      <div class="col-sm-12" style="padding: 0;margin-top:7px">\n\n        <mat-form-field appearance="outline">\n          <mat-label>Password</mat-label>\n          <input matInput  type="password" placeholder="Password" formControlName="password" required>\n          <mat-error *ngIf="formGroup.controls[\'password\'].invalid">{{getError("password")}}</mat-error>\n\n        </mat-form-field>\n      </div>\n\n\n\n\n    </form>\n\n  </mat-dialog-content>\n\n  <mat-dialog-actions>\n\n      <div class="googleLogin" style="width:100%">\n        <button mat-raised-button color="warn" (click)="login(\'google\')" style="width:100%">\n          <span><i class="fab fa-google-plus-g"></i>&nbsp;&nbsp;Log in with Google</span>\n        </button>\n\n\n\n      </div>\n\n    <div class="login-actions col-sm-12 row">\n      <div class="col-sm-6">\n        <button mat-raised-button color="primary" (click)="login(\'email\')" [disabled]="this.formGroup.invalid">Login</button>\n\n      </div>\n      <div class="col-sm-6">\n        <button mat-raised-button (click)="cancel()">Cancel</button>\n\n      </div>\n\n    </div>\n\n    \x3c!--<button type="button" class="btn googleBtn" (click)="authService.GoogleAuth()">--\x3e\n      \x3c!--<i class="fab fa-google-plus-g"></i>--\x3e\n      \x3c!--Log in with Google--\x3e\n    \x3c!--</button>--\x3e\n  </mat-dialog-actions>\n\n</div>\n',styles:[".main{width:300px;height:280px}.mat-form-field{display:block}.googleLogin{color:#fff;margin-left:0}.login-actions{margin:6px 0 0;text-align:center;padding:0}.login-actions button{width:100%}.login-actions div{padding:0}.login-actions div:first-child{padding-right:5px}::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}"]}),I(2,t.Inject(r.MAT_DIALOG_DATA)),C("design:paramtypes",[d.Router,r.MatDialogRef,Object,p.FormBuilder,_,j,W,r.MatDialog])],e)}(),X=function(){function e(e,t,n,r){var o=this;this.authService=e,this.router=t,this.dialog=n,this.dashboardService=r,this.init=function(){return M(o,void 0,void 0,function(){var e;return k(this,function(t){switch(t.label){case 0:return e=this.dashboardService,[4,this.dashboardService.init()];case 1:return e.modelSchema=t.sent(),[2,!0]}})})}}return e.prototype.canActivate=function(e,t){return this.authService.isLoggedIn?this.init():(this.dialog.open(Q).afterClosed().subscribe(function(e){}),!1)},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(_),t.ɵɵinject(d.Router),t.ɵɵinject(h.MatDialog),t.ɵɵinject(Y))},token:e,providedIn:"root"}),e=w([t.Injectable({providedIn:"root"}),C("design:paramtypes",[_,d.Router,r.MatDialog,Y])],e)}(),Z=[{path:"dashboard",component:H,canActivate:[X]}],ee=function(){function e(){}return e=w([t.NgModule({imports:[d.RouterModule.forRoot(Z)],exports:[d.RouterModule]})],e)}(),te=function(){function e(e,t){var n=this;this.dialog=e,this.authService=t,this.openLoginDialog=function(){n.dialog.open(Q).afterClosed().subscribe(function(e){})},this.openSignupDialog=function(){n.dialog.open(K).afterClosed().subscribe(function(e){})}}return e.prototype.ngOnInit=function(){},e=w([t.Component({selector:"app-tool-bar",template:'<mat-toolbar color="primary">\n  <span>Dynamic Form</span>\n\n  \x3c!-- This fills the remaining space of the current row --\x3e\n  <span class="example-fill-remaining-space"></span>\n\n  \x3c!-- login Button --\x3e\n  <button mat-button (click)="openLoginDialog()" *ngIf="!authService.isLoggedIn">Login</button>\n  <button mat-button (click)="openSignupDialog()" *ngIf="!authService.isLoggedIn">Sign Up</button>\n  <button mat-button (click)="authService.SignOut()" *ngIf="authService.isLoggedIn">Logout</button>\n\n\n</mat-toolbar>\n',styles:[".example-fill-remaining-space{flex:1 1 auto}"]}),C("design:paramtypes",[r.MatDialog,_])],e)}(),ne=function(){function e(e,n){var r=this;this.formBuilder=e,this.validationMessageGenerator=n,this.addControl=new t.EventEmitter,this.addValidator=function(){var e,t=[];r.property.required&&t.push((new q).get()),t.push(p.Validators.email),r.formGroup=r.formBuilder.group(((e={})[r.property.name]=[{value:"",disabled:!r.property.enable},t],e)),r.formGroup.updateValueAndValidity(),r.addControl.emit({key:r.property.name,value:r.formGroup})},this.getError=function(){return r.validationMessageGenerator.errorMessage(r.formGroup,r.property)}}return e.prototype.ngOnInit=function(){this.addValidator()},w([t.Input(),C("design:type",Object)],e.prototype,"property",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"addControl",void 0),e=w([t.Component({selector:"app-email-field",template:'<div [formGroup]="formGroup">\n  <mat-form-field appearance="outline">\n    <mat-label>{{property.alias}}\n      <span *ngIf = "property.required" class="asterik">*</span>\n    </mat-label>\n\n    <input matInput #input\n           formControlName={{property.name}}\n           placeholder={{property.alias}}\n           type="email">\n\n    <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError()}}</mat-error>\n\n  </mat-form-field>\n</div>\n',styles:[".mat-form-field{width:100%}.asterik{color:red}"]}),C("design:paramtypes",[p.FormBuilder,U])],e)}(),re=function(){function e(e,n){var r=this;this.formBuilder=e,this.validationMessageGenerator=n,this.addControl=new t.EventEmitter,this.addValidator=function(){var e,t=[];r.property.required&&t.push((new q).get()),r.property.minLength&&null!=r.property.minLength&&t.push((new T).get(r.property.minLength)),r.property.maxLength&&null!=r.property.maxLength&&t.push((new D).get(r.property.maxLength)),r.property.pattern&&null!=r.property.pattern&&t.push((new A).get(r.property.pattern)),r.formGroup=r.formBuilder.group(((e={})[r.property.name]=[{value:"",disabled:!r.property.enable},t],e)),r.formGroup.updateValueAndValidity(),r.addControl.emit({key:r.property.name,value:r.formGroup})},this.getError=function(){return r.validationMessageGenerator.errorMessage(r.formGroup,r.property)}}return e.prototype.ngOnInit=function(){this.addValidator()},w([t.Input(),C("design:type",Object)],e.prototype,"property",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"addControl",void 0),e=w([t.Component({selector:"app-password-field",template:'<div [formGroup]="formGroup">\n  <mat-form-field appearance="outline">\n    <mat-label>{{property.alias}}\n      <span *ngIf = "property.required" class="asterik">*</span>\n    </mat-label>\n\n    <input matInput #input\n           formControlName={{property.name}}\n           placeholder={{property.alias}}\n           type="password"\n           [attr.maxlength] = "property.maxLength ? null : property.maxLength"\n           [attr.minlength] = "property.minLength ? null : property.minLength" >\n\n\n    <mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError()}}</mat-error>\n\n  </mat-form-field>\n</div>\n',styles:[".mat-form-field{width:100%}.asterik{color:red}"]}),C("design:paramtypes",[p.FormBuilder,U])],e)}(),oe={production:!1,firebaseConfig:{apiKey:"AIzaSyAhthWRtzWHuG_C6xyKhNU3wPD_Ck9PS34",authDomain:"form-35b09.firebaseapp.com",databaseURL:"https://form-35b09.firebaseio.com",projectId:"form-35b09",storageBucket:"",messagingSenderId:"368882932305",appId:"1:368882932305:web:891e308aaacd6c73"}},ae=function(){function e(){}return e.prototype.ngOnInit=function(){},e=w([t.Component({selector:"app-loading-spinner",template:'<div class="spinner-wrapper">\n  <div class="spinner">\n    <div class="rect1"></div>\n    <div class="rect2"></div>\n    <div class="rect3"></div>\n    <div class="rect4"></div>\n    <div class="rect5"></div>\n  </div>\n</div>\n\n\n',styles:[".spinner-wrapper{display:flex;z-index:9998;opacity:.5;pointer-events:none;position:absolute;top:0;right:0;left:0;bottom:0}.spinner{width:50px;height:40px;text-align:center;font-size:10px;margin:auto;z-index:9999}.spinner>div{background-color:#003cff;height:100%;width:6px;display:inline-block;-webkit-animation:1.2s ease-in-out infinite sk-stretchdelay;animation:1.2s ease-in-out infinite sk-stretchdelay}.spinner .rect2{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.spinner .rect3{-webkit-animation-delay:-1s;animation-delay:-1s}.spinner .rect4{-webkit-animation-delay:-.9s;animation-delay:-.9s}.spinner .rect5{-webkit-animation-delay:-.8s;animation-delay:-.8s}@-webkit-keyframes sk-stretchdelay{0%,100%,40%{-webkit-transform:scaleY(.4)}20%{-webkit-transform:scaleY(1)}}@keyframes sk-stretchdelay{0%,100%,40%{transform:scaleY(.4);-webkit-transform:scaleY(.4)}20%{transform:scaleY(1);-webkit-transform:scaleY(1)}}"]}),C("design:paramtypes",[])],e)}(),ie=function(){function e(e){var t=this;this.formBuilder=e,this.formGroup=this.formBuilder.group({}),this.addControl=function(e){l.each(t.uiSchema.steps,function(n){l.find(n.fields,function(t){return t.name===e.key})&&(t.formGroup.controls[n.sequence-1].addControl(e.key,e.value),t.formGroup.updateValueAndValidity())})},this.formValue=function(){console.log(t.formGroup.getRawValue())},this.reset=function(){t.formGroup.reset()}}return e.prototype.ngOnInit=function(){var e=this,t=[];l.range(this.uiSchema.totalSteps).forEach(function(n){t[n]=e.formBuilder.group({})}),this.formGroup=this.formBuilder.group(t)},e.prototype.ngOnChanges=function(){this.formGroup=this.formBuilder.group({})},w([t.Input(),C("design:type",Object)],e.prototype,"uiSchema",void 0),e=w([t.Component({selector:"app-step-form",template:'  <div class="ex-form">\n\n    <h5>{{uiSchema.name}}</h5>\n\n  <mat-horizontal-stepper [linear]="true" labelPosition="bottom" #stepper>\n\n\n    <ng-container *ngFor="let stepControl of formGroup.controls | keyvalue;let i = index;">\n\n        <mat-step [stepControl]="stepControl.value" [completed]="false">\n          <form [formGroup]="stepControl.value" >\n            <div class="row">\n              <ng-container *ngFor="let property of uiSchema.steps[i].fields;">\n                <ng-template matStepLabel  matStepperIcon="number">{{uiSchema.steps[i].label}}</ng-template>\n\n                \x3c!--Form field for text input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'String\'">\n                  <app-text-field [property]="property"\n                                  (addControl)= "addControl($event)" >\n                  </app-text-field>\n                </div>\n\n                \x3c!--Form field for email input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Email\'">\n\n                  <app-email-field  [property]="property"\n                                    (addControl)= "addControl($event)" >\n                  </app-email-field>\n                </div>\n\n                \x3c!--Form field for password input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Password\'">\n\n                  <app-password-field  [property]="property"\n                                       (addControl)= "addControl($event)" >\n                  </app-password-field>\n                </div>\n                \x3c!--Form field for number input  --\x3e\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Number\'" style="margin-bottom:0;">\n\n                  <app-number-field [property]="property"\n                                    (addControl)= "addControl($event)" >\n                  </app-number-field>\n\n                </div>\n\n                \x3c!--Form field for enumeration--\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Enumeration\'"\n                     style="margin-bottom:0px;">\n                  <app-dropdown [property]="property"\n                                (addControl)= "addControl($event)" >\n                  </app-dropdown>\n\n                </div>\n\n                \x3c!--Form field for Measure Datatype--\x3e\n\n                <div class="form-group col-sm-6"\n                     *ngIf="property && property.dataType==\'Measure\'"\n                     style="margin-bottom:0;padding-right: 0;">\n\n\n\n                  <app-measure\n                    [property]="property"\n                    (addControl)= "addControl($event)" >\n                  </app-measure>\n\n                </div>\n              </ng-container>\n\n            </div>\n\n            <div>\n              <p style="font-size:13px;"><span class="asterik" style="font-size:16px;">* </span>field are mandatory</p>\n            </div>\n            <div class="btn btn-toolbar">\n              <button mat-button matStepperPrevious *ngIf="i > 0">Back</button>\n              <button\n                mat-button\n                matStepperNext\n                *ngIf="i < uiSchema.totalSteps-1">\n                Next\n              </button>\n\n              <button\n                mat-raised-button\n                type="button"\n                color="primary"\n                *ngIf= "i === uiSchema.totalSteps-1"\n                (click)="formValue()"\n                [disabled]="!formGroup.valid">\n                Submit\n              </button>\n            </div>\n\n          </form>\n\n        </mat-step>\n\n\n    </ng-container>\n  </mat-horizontal-stepper>\n\n</div>\n\n',styles:[".jumbotron{background-color:#f8f9fa;padding:15px;margin-top:56px}::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}.row{margin-bottom:0}.asterik{color:red}.ex-form{background:#fff;box-shadow:0 2px 6px 4px rgba(0,0,0,.14);border-radius:15px;padding:20px}.padding-right-zero{padding-right:0}.padding-zero{padding:0}::ng-deep .mat-horizontal-stepper-header{pointer-events:none!important}"]}),C("design:paramtypes",[p.FormBuilder])],e)}(),pe=function(){function e(e){var t=this;this.formBuilder=e,this.formGroup=this.formBuilder.group({}),this.addControl=function(e){t.formGroup.addControl(e.key,e.value),t.formGroup.updateValueAndValidity()},this.getFormValue=function(){console.log(t.formGroup.getRawValue())},this.reset=function(){console.log(t.formGroup),t.formGroup.reset()}}return e.prototype.ngOnInit=function(){},e.prototype.ngOnChanges=function(){this.formGroup=this.formBuilder.group({})},w([t.Input(),C("design:type",Object)],e.prototype,"uiSchema",void 0),e=w([t.Component({selector:"app-simple",template:'<div>\n  <form [formGroup]="formGroup" class="ex-form">\n    <h5>{{uiSchema.name}}</h5>\n    <div class="row">\n      <ng-container *ngFor="let property of uiSchema.fields; let i=index;">\n        \x3c!--Form field for text input  --\x3e\n        <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'String\'">\n          <app-text-field [property]="property"\n                          (addControl)= "addControl($event)" >\n          </app-text-field>\n        </div>\n\n\n        \x3c!--Form field for password input  --\x3e\n\n        <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Password\'">\n\n          <app-password-field  [property]="property"\n                               (addControl)= "addControl($event)" >\n          </app-password-field>\n        </div>\n\n        \x3c!--Form field for email input  --\x3e\n\n        <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Email\'">\n\n          <app-email-field  [property]="property"\n                            (addControl)= "addControl($event)" >\n          </app-email-field>\n        </div>\n\n        \x3c!--Form field for number input  --\x3e\n        <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Number\'" style="margin-bottom:0;">\n\n          <app-number-field [property]="property"\n                            (addControl)= "addControl($event)" >\n          </app-number-field>\n\n        </div>\n        \x3c!--Form field for enumeration--\x3e\n\n        <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Enumeration\'"\n             style="margin-bottom:0px;">\n          <app-dropdown [property]="property"\n                        (addControl)= "addControl($event)" >\n          </app-dropdown>\n\n        </div>\n\n\n\n        <div class="form-group col-sm-6"\n             *ngIf="property && property.dataType==\'Measure\'"\n             style="margin-bottom:0;\n                    padding-right:0;">\n\n\n          <app-measure\n            [property]="property"\n            (addControl)= "addControl($event)" >\n          </app-measure>\n\n        </div>\n\n      </ng-container>\n    </div>\n\n    <div>\n      <p style="font-size:13px;"><span class="asterik" style="font-size:16px;">* </span>field are mandatory</p>\n    </div>\n    <div class="btn btn-toolbar">\n\n      <button type="button" class="btn btn-primary" (click)= "getFormValue()" [disabled]="!formGroup.valid">Submit</button>\n      &nbsp; &nbsp;\n\n      <button type="button" (click)="reset()" class="btn btn-primary">Reset</button>\n    </div>\n\n  </form>\n\n</div>\n',styles:[".jumbotron{background-color:#f8f9fa;padding:15px;margin-top:56px}::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}.row{margin-bottom:0}.asterik{color:red}.ex-form{background:#fff;box-shadow:0 2px 6px 4px rgba(0,0,0,.14);border-radius:15px;padding:20px}.padding-right-zero{padding-right:0}.padding-zero{padding:0}"]}),C("design:paramtypes",[p.FormBuilder])],e)}(),le=function(){function e(e){var t=this;this.formBuilder=e,this.formGroup=this.formBuilder.group({}),this.step=0,this.addControl=function(e){l.each(t.uiSchema.steps,function(n){l.find(n.fields,function(t){return t.name===e.key})&&(t.formGroup.controls[n.sequence-1].addControl(e.key,e.value),t.formGroup.updateValueAndValidity())})},this.formValue=function(){console.log(t.formGroup.getRawValue())},this.reset=function(){t.formGroup.reset()}}return e.prototype.ngOnInit=function(){var e=this;console.log("UI Schema",this.uiSchema);var t=[];l.range(this.uiSchema.totalSteps).forEach(function(n){t[n]=e.formBuilder.group({})}),this.formGroup=this.formBuilder.group(t)},e.prototype.ngOnChanges=function(){this.formGroup=this.formBuilder.group({})},e.prototype.setStep=function(e){this.step=e},e.prototype.nextStep=function(){this.step++},e.prototype.prevStep=function(){this.step--},w([t.Input(),C("design:type",Object)],e.prototype,"uiSchema",void 0),e=w([t.Component({selector:"app-accordian",template:'<div class="ex-form">\n\n  <h5>{{uiSchema.name}}</h5>\n\n  <div style="margin: 3% 0;">\n\n\n    <mat-accordion class="example-headers-align">\n\n      <ng-container *ngFor="let stepControl of formGroup.controls | keyvalue;let i = index;">\n\n        <mat-expansion-panel [expanded]="step === uiSchema.steps[i].sequence-1 " (opened)="setStep(uiSchema.steps[i].sequence-1)" hideToggle>\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n             <b> {{uiSchema.steps[i].label}}</b>\n            </mat-panel-title>\n            <mat-panel-description>\n              {{uiSchema.steps[i].description}}\n              \x3c!--<mat-icon>account_circle</mat-icon>--\x3e\n            </mat-panel-description>\n          </mat-expansion-panel-header>\n\n\n          <form [formGroup]="stepControl.value" style="margin-top: 20px" >\n            <div class="row">\n              <ng-container *ngFor="let property of uiSchema.steps[i].fields;">\n                <ng-template matStepLabel  matStepperIcon="number">{{uiSchema.steps[i].label}}</ng-template>\n\n                \x3c!--Form field for text input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'String\'">\n                  <app-text-field [property]="property"\n                                  (addControl)= "addControl($event)" >\n                  </app-text-field>\n                </div>\n\n                \x3c!--Form field for email input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Email\'">\n\n                  <app-email-field  [property]="property"\n                                    (addControl)= "addControl($event)" >\n                  </app-email-field>\n                </div>\n\n                \x3c!--Form field for password input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Password\'">\n\n                  <app-password-field  [property]="property"\n                                       (addControl)= "addControl($event)" >\n                  </app-password-field>\n                </div>\n                \x3c!--Form field for number input  --\x3e\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Number\'" style="margin-bottom:0;">\n\n                  <app-number-field [property]="property"\n                                    (addControl)= "addControl($event)" >\n                  </app-number-field>\n\n                </div>\n\n                \x3c!--Form field for enumeration--\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Enumeration\'"\n                     style="margin-bottom:0px;">\n                  <app-dropdown [property]="property"\n                                (addControl)= "addControl($event)" >\n                  </app-dropdown>\n\n                </div>\n\n                \x3c!--Form field for Measure Datatype--\x3e\n\n                <div class="form-group col-sm-6"\n                     *ngIf="property && property.dataType==\'Measure\'"\n                     style="margin-bottom:0;padding-right: 0;">\n\n\n\n                  <app-measure\n                    [property]="property"\n                    (addControl)= "addControl($event)" >\n                  </app-measure>\n\n                </div>\n              </ng-container>\n\n            </div>\n\n            <div>\n              <p style="font-size:13px;"><span class="asterik" style="font-size:16px;">* </span>field are mandatory</p>\n            </div>\n            <div class="btn btn-toolbar">\n              <button mat-button\n                      *ngIf="i > 0"\n                      (click)="prevStep()">\n                Back\n              </button>\n              <button\n                mat-button\n                [disabled]="!stepControl.value.valid"\n                (click)="nextStep()"\n                *ngIf="i < uiSchema.totalSteps-1">\n                Next\n              </button>\n\n              <button\n                mat-raised-button\n                type="button"\n                color="primary"\n                *ngIf= "i === uiSchema.totalSteps-1"\n                (click)="formValue()"\n                [disabled]="!formGroup.valid">\n                Submit\n              </button>\n            </div>\n\n          </form>\n\n        </mat-expansion-panel>\n\n      </ng-container>\n\n    </mat-accordion>\n  </div>\n\n</div>\n',styles:["::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}.row{margin-bottom:0}.asterik{color:red}.ex-form{background:#fff;box-shadow:0 1px 2px 2px rgba(0,0,0,.14);padding:30px}.padding-right-zero{padding-right:0}.padding-zero{padding:0}mat-expansion-panel{margin-bottom:20px}"]}),C("design:paramtypes",[p.FormBuilder])],e)}(),se=function(){function e(e){var t=this;this.formBuilder=e,this.formGroup=this.formBuilder.group({}),this.buildStepFormGroup=function(){var e=[];l.range(t.uiSchema.totalSteps).forEach(function(n){e[n]=t.formBuilder.group({})}),t.formGroup=t.formBuilder.group(e)},this.addControl=function(e){l.each(t.uiSchema.steps,function(n){l.find(n.fields,function(t){return t.name===e.key})&&(t.formGroup.controls[n.sequence-1].addControl(e.key,e.value),t.formGroup.updateValueAndValidity())})},this.formValue=function(){console.log(t.formGroup.getRawValue())},this.reset=function(){t.formGroup.reset()}}return e.prototype.ngOnInit=function(){this.buildStepFormGroup()},e.prototype.ngOnChanges=function(){this.buildStepFormGroup()},w([t.Input(),C("design:type",Object)],e.prototype,"uiSchema",void 0),e=w([t.Component({selector:"app-tab",template:'\n\n\n\n<div class="ex-form">\n\n  <h5>{{uiSchema.name}}</h5>\n\n  <mat-tab-group animationDuration="0ms" #tabGroup>\n\n\n    <ng-container *ngFor="let stepControl of formGroup.controls | keyvalue;let i = index;">\n\n      \x3c!--<mat-step [stepControl]="stepControl.value" [completed]="false">--\x3e\n        <mat-tab [label] = "uiSchema.steps[i].label">\n          <form [formGroup]="stepControl.value" >\n            <div class="row">\n              <ng-container *ngFor="let property of uiSchema.steps[i].fields;">\n                <ng-template matStepLabel  matStepperIcon="number">{{uiSchema.steps[i].label}}</ng-template>\n\n                \x3c!--Form field for text input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'String\'">\n                  <app-text-field [property]="property"\n                                  (addControl)= "addControl($event)" >\n                  </app-text-field>\n                </div>\n\n                \x3c!--Form field for email input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Email\'">\n\n                  <app-email-field  [property]="property"\n                                    (addControl)= "addControl($event)" >\n                  </app-email-field>\n                </div>\n\n                \x3c!--Form field for password input  --\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Password\'">\n\n                  <app-password-field  [property]="property"\n                                       (addControl)= "addControl($event)" >\n                  </app-password-field>\n                </div>\n\n                \x3c!--Form field for number input  --\x3e\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Number\'" style="margin-bottom:0;">\n\n                  <app-number-field [property]="property"\n                                    (addControl)= "addControl($event)" >\n                  </app-number-field>\n\n                </div>\n\n                \x3c!--Form field for enumeration--\x3e\n\n                <div class="form-group col-sm-6" *ngIf="property && property.dataType==\'Enumeration\'"\n                     style="margin-bottom:0px;">\n                  <app-dropdown [property]="property"\n                                (addControl)= "addControl($event)" >\n                  </app-dropdown>\n\n                </div>\n\n                \x3c!--Form field for Measure Datatype--\x3e\n\n                <div class="form-group col-sm-6"\n                     *ngIf="property && property.dataType==\'Measure\'"\n                     style="margin-bottom:0;padding-right: 0;">\n\n\n\n                  <app-measure\n                    [property]="property"\n                    (addControl)= "addControl($event)" >\n                  </app-measure>\n\n                </div>\n              </ng-container>\n\n            </div>\n\n            <div>\n              <p style="font-size:13px;"><span class="asterik" style="font-size:16px;">* </span>field are mandatory</p>\n            </div>\n            <div class="btn btn-toolbar">\n              <button mat-button *ngIf="i > 0"\n                      (click)="tabGroup.selectedIndex = i-1">Back</button>\n              <button\n                mat-button\n                *ngIf="i < uiSchema.totalSteps-1"\n                [disabled]="!stepControl.value.valid"\n                (click)="tabGroup.selectedIndex = i+1">\n                Next\n              </button>\n\n              <button\n                mat-raised-button\n                type="button"\n                color="primary"\n                *ngIf= "i === uiSchema.totalSteps-1"\n                (click)="formValue()"\n                [disabled]="!formGroup.valid">\n                Submit\n              </button>\n            </div>\n\n          </form>\n        </mat-tab>\n\n\n\n      \x3c!--</mat-step>--\x3e\n\n\n    </ng-container>\n  </mat-tab-group>\n\n</div>\n\n',styles:["::ng-deep .mat-form-field-flex>.mat-form-field-infix{padding:.35em 0!important}::ng-deep .mat-form-field-label-wrapper{top:-1.5em}::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.1em) scale(.75);transform:translateY(-1.1em) scale(.75);width:133.33333%}.mat-form-field-wrapper{padding:0}.row{margin-bottom:0}.asterik{color:red}.ex-form{background:#fff;box-shadow:0 2px 6px 4px rgba(0,0,0,.14);border-radius:15px;padding:20px}.padding-right-zero{padding-right:0}.padding-zero{padding:0}::ng-deep .mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0;pointer-events:none}::ng-deep .mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1);margin:25px 0 0}::ng-deep .mat-tab-body-content{overflow:visible!important}"]}),C("design:paramtypes",[p.FormBuilder])],e)}(),de=function(){function e(){this.uiSchemaChange=new t.EventEmitter,this.uiSchemaEditorOptions=new s.JsonEditorOptions,this.uiSchemaEditorOptions.mode="code"}return e.prototype.ngOnInit=function(){console.log("Old UI Schema",this.uiSchemaData)},e.prototype.getData=function(e){this.editor.isValidJson()?this.uiSchemaChange.emit(this.editor.get()):console.log("UI Schema is incorrect")},w([t.ViewChild(s.JsonEditorComponent,{static:!1}),C("design:type",s.JsonEditorComponent)],e.prototype,"editor",void 0),w([t.Input(),C("design:type",Object)],e.prototype,"uiSchemaData",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"uiSchemaChange",void 0),e=w([t.Component({selector:"app-ui-schema",template:'<div style="margin-bottom: 10px;">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>UI Schema</mat-card-title>\n    </mat-card-header>\n\n    <mat-card-content>\n      <json-editor [options]="uiSchemaEditorOptions" [data]="uiSchemaData" (keyup)="getData($event)"></json-editor>\n    </mat-card-content>\n  </mat-card>\n\n</div>\n',styles:["::ng-deep div.jsoneditor-menu{width:100%;height:35px;padding:2px;margin:0;box-sizing:border-box;color:#fff;background-color:#3883fa;border-bottom:1px solid #3883fa;display:none}mat-card{background:#f5f5f5;padding:0;border:1px solid #000}::ng-deep div.jsoneditor{border:none}"]}),C("design:paramtypes",[])],e)}(),me=function(){function e(){this.modelSchemaChange=new t.EventEmitter,this.modelSchemaEditorOptions=new s.JsonEditorOptions,this.modelSchemaEditorOptions.mode="code"}return e.prototype.ngOnInit=function(){console.log("Old model Schema",this.modelSchemaData)},e.prototype.getData=function(e){this.editor.isValidJson()&&(this.modelSchemaChange.emit(this.editor.get()),console.log("correct"))},w([t.ViewChild(s.JsonEditorComponent,{static:!1}),C("design:type",s.JsonEditorComponent)],e.prototype,"editor",void 0),w([t.Input(),C("design:type",Object)],e.prototype,"modelSchemaData",void 0),w([t.Output(),C("design:type",Object)],e.prototype,"modelSchemaChange",void 0),e=w([t.Component({selector:"app-model-schema",template:'<mat-card class="example-card">\n  <mat-card-header>\n    <mat-card-title>Model Schema</mat-card-title>\n  </mat-card-header>\n\n  <mat-card-content>\n    <json-editor [options]="modelSchemaEditorOptions" [data]="modelSchemaData" (keyup)="getData($event)"></json-editor>\n  </mat-card-content>\n</mat-card>\n',styles:["::ng-deep div.jsoneditor-menu{width:100%;height:35px;padding:2px;margin:0;box-sizing:border-box;color:#fff;background-color:#3883fa;border-bottom:1px solid #3883fa;display:none}mat-card{background:#f5f5f5;padding:0;border:1px solid #000}::ng-deep div.jsoneditor{border:none}"]}),C("design:paramtypes",[])],e)}(),ue=function(){function e(){}return e.prototype.ngOnInit=function(){},e=w([t.Component({selector:"app-radio",template:'\x3c!--<div [formGroup]="formGroup">--\x3e\n  \x3c!--<mat-form-field appearance="outline">--\x3e\n    \x3c!--<mat-label>{{property.alias}}--\x3e\n      \x3c!--<span *ngIf = "property.required" class="asterik">*</span>--\x3e\n    \x3c!--</mat-label>--\x3e\n\n    \x3c!--&lt;!&ndash;<mat-select formControlName={{property.name}} multiple={{property.array}}>&ndash;&gt;--\x3e\n      \x3c!--&lt;!&ndash;<mat-option *ngIf="!property.array">Select</mat-option>&ndash;&gt;--\x3e\n      \x3c!--&lt;!&ndash;<mat-option *ngFor="let opt of property.values" [value]="opt">&ndash;&gt;--\x3e\n        \x3c!--&lt;!&ndash;{{opt}}&ndash;&gt;--\x3e\n      \x3c!--&lt;!&ndash;</mat-option>&ndash;&gt;--\x3e\n    \x3c!--&lt;!&ndash;</mat-select>&ndash;&gt;--\x3e\n\n    \x3c!--<mat-error *ngIf="formGroup.controls[property.name].invalid">{{getError()}}</mat-error>--\x3e\n\n  \x3c!--</mat-form-field>--\x3e\n\n\x3c!--</div>--\x3e\n',styles:[""]}),C("design:paramtypes",[])],e)}(),ce=function(){function e(){}return e=w([t.NgModule({declarations:[F,L,B,N,R,$,J,H,Q,te,K,ne,re,ae,ie,pe,le,se,de,me,ue],imports:[p.FormsModule,O,p.ReactiveFormsModule,i.CommonModule,ee,r.MatDialogModule,a.BrowserModule,x.AngularFireModule.initializeApp(oe.firebaseConfig),x.AngularFireModule,c.AngularFirestoreModule,g.MatSnackBarModule,f.AngularFireDatabaseModule,u.AngularFireAuthModule,y.MatExpansionModule,v.MatTabsModule,b.SocialLoginModule,n.HttpClientModule,s.NgJsonEditorModule],entryComponents:[Q,K],providers:[V,U,_,j],bootstrap:[F]})],e)}();e.AppModule=ce,e.ɵa=F,e.ɵb=j,e.ɵba=ue,e.ɵbb=O,e.ɵbc=ee,e.ɵbd=X,e.ɵbe=oe,e.ɵc=L,e.ɵd=V,e.ɵe=B,e.ɵf=N,e.ɵg=U,e.ɵh=R,e.ɵi=$,e.ɵj=J,e.ɵk=H,e.ɵl=Y,e.ɵm=Q,e.ɵn=_,e.ɵo=W,e.ɵp=te,e.ɵq=K,e.ɵr=ne,e.ɵs=re,e.ɵt=ae,e.ɵu=ie,e.ɵv=pe,e.ɵw=le,e.ɵx=se,e.ɵy=de,e.ɵz=me,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=angulr-json-form.umd.min.js.map